-> database management using flask-sqlalchemy lesson  
   -> create models and relationships with flask-sqlalchemy  

-> contents  
   -> introduction  
   -> defining models  
   -> flask sqlalchemy table columns  
   -> flask sqlalchemy one-to-many relationships  
   -> foreign keys  
   -> backref  
   -> summary: defining models and relationships in flask sqlalchemy  

-> introduction  
   -> this lesson covers creating models and relationships in flask-sqlalchemy  
   -> models abstract database functionality, and relationships link data entities  
   -> example theme: a music-sharing social media webapp  

-> defining models  
   -> models represent database tables and are python classes with attributes corresponding to table columns  
   -> flask-sqlalchemy provides `db.model` as a base class for defining models  
   -> example models for a music-sharing app:  
      ```python  
      class role(db.model):  
          __tablename__ = 'roles'  
          id = db.column(db.integer, primary_key=true)  
          name = db.column(db.string(64), unique=true)  

          def __repr__(self):  
              return f"<role {self.name}>"  

      class user(db.model):  
          __tablename__ = 'users'  
          id = db.column(db.integer, primary_key=true)  
          username = db.column(db.string(64), unique=true, index=true)  

          def __repr__(self):  
              return f"<user {self.username}>"  
      ```  

-> flask sqlalchemy table columns  
   -> table columns are defined using `db.column`  
   -> example column types include:  
      -> `integer`: regular integers  
      -> `string`: variable-length strings  
      -> `boolean`: true/false values  
      -> `datetime`: date and time values  
      -> `text`: long text strings  
   -> column options:  
      -> `primary_key`: marks a column as the table's primary key  
      -> `unique`: ensures values are unique across rows  
      -> `index`: creates an index for faster lookups  
      -> `nullable`: specifies whether a column can contain null values  
      -> `default`: provides a default value for the column  

-> flask sqlalchemy one-to-many relationships  
   -> relationships connect rows across tables (e.g., one user to one role)  
   -> defined using `db.relationship()` and `db.foreignkey()`  
   -> example:  
      ```python  
      class role(db.model):  
          # ...  
          users = db.relationship('user', backref='role')  

      class user(db.model):  
          # ...  
          role_id = db.column(db.integer, db.foreignkey('roles.id'))  
      ```  

-> foreign keys  
   -> foreign keys establish links between tables  
   -> a foreign key in one table references the primary key in another  
   -> example:  
      -> the `role_id` column in the `user` table is a foreign key referencing the `id` column in the `role` table  
      -> `db.foreignkey('roles.id')` specifies the relationship  

-> backref  
   -> the `backref` argument in `db.relationship()` creates a bidirectional relationship  
   -> example:  
      -> access `user.role` for the role associated with a user  
      -> access `role.users` for all users associated with a role  

-> additional relationship options  
   -> `primaryjoin` and `secondaryjoin`: resolve ambiguity in join conditions  
   -> `lazy`: specifies how related data is loaded (e.g., eager or lazy loading)  
   -> `order_by`: determines the sorting of related items  
   -> `uselist`: whether the relationship should return a list or a scalar  

-> summary: defining models and relationships in flask sqlalchemy  
   -> models map python classes to database tables, with attributes as columns  
   -> the `__tablename__` attribute overrides default table naming conventions  
   -> relationships, such as one-to-many, link models and facilitate data queries  
   -> key tools: `db.model`, `db.column`, `db.relationship()`, `db.foreignkey()`  
   -> with this foundation, you can design more complex database models  
