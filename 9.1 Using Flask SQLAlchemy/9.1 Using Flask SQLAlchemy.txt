-> database management using flask-sqlalchemy lesson  
   -> using flask sqlalchemy  

-> introduction  
   -> this lesson explains the role of databases in flask applications  
   -> learn about sqlalchemy, flask-sqlalchemy, and their integration into flask projects  
   -> includes step-by-step guidance for installing flask-sqlalchemy  

-> why use a database?  
   -> modern web applications often rely on databases to store data in an organised manner  
   -> databases allow efficient handling of large and growing data sets, supporting specific retrieval requests  
   -> they facilitate key functions like user authentication, presenting relevant content, and maintaining server records  
   -> examples include retrieving user credentials for login verification, fetching product listings with prices, or accessing stored images by criteria  

-> brief introduction to sql and relational databases  
   -> databases are categorised into relational (sql) and document-oriented (nosql) types  
   -> sql stands for structured query language, the standard language for querying relational databases  
   -> relational databases organise data in tables, each modelling a specific entity in the system's domain  
   -> tables comprise fixed columns that define the type of data and rows that dynamically grow as data is added  
   -> for example, a pet store's database might include tables such as `products`, `customers`, and `pet categories`  

-> what is sqlalchemy?  
   -> sqlalchemy is a python sql toolkit and object relational mapper (orm)  
   -> enables developers to interact with databases using python objects instead of raw sql queries or table manipulations  
   -> offers flexibility and supports multiple database backends while providing access to low-level sql features  
   -> simplifies complex operations and enhances the developer experience  

-> what is flask-sqlalchemy?  
   -> flask-sqlalchemy is an extension that integrates sqlalchemy with flask  
   -> reduces the complexity of setting up sqlalchemy in flask projects by handling configuration and connection management  
   -> offers an easy-to-use interface for basic operations while allowing advanced customisation with sqlalchemy directly  

-> how to install sqlalchemy for python and flask  
   -> flask-sqlalchemy can be installed using pip:  
      -> command: `(env) $ pip install flask-sqlalchemy`  

-> specifying a database  
   -> flask-sqlalchemy uses urls to define database connections  
   -> sqlite database example:  
      -> for linux/macos: `sqlite:////absolute/path/to/database`  
      -> for windows: `sqlite:///c:/absolute/path/to/database`  
   -> configuration in flask:  
      ```python  
      import os  
      from flask_sqlalchemy import sqlalchemy  

      basedir = os.path.abspath(os.path.dirname(__file__))  
      app = flask(__name__)  
      app.config['sqlalchemy_database_uri'] = 'sqlite:///' + os.path.join(basedir, 'data-dev.sqlite')  
      app.config['sqlalchemy_track_modifications'] = false  
      db = sqlalchemy(app)  
      ```  
   -> `sqlalchemy_database_uri` specifies the path to the database file  
   -> `sqlalchemy_track_modifications` is disabled to save memory and prevent unnecessary tracking  
   -> if the specified database file does not exist, sqlalchemy will automatically create it  

-> summary: what is flask-sqlalchemy and how to install sqlalchemy?  
   -> sqlalchemy is a python toolkit and orm for working with relational databases  
   -> relational databases use tables to store data and are queried using sql  
   -> sqlalchemy simplifies database interactions by enabling operations through python objects  
   -> flask-sqlalchemy streamlines the integration of sqlalchemy into flask projects, handling configuration and connections  
   -> installation is straightforward using pip: `(env) $ pip install flask-sqlalchemy`  
   -> configuration involves specifying the database url and disabling unnecessary tracking features  
