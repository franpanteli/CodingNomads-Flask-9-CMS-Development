-> database management using flask-sqlalchemy lesson  
   -> database migration with flask-migrate  

-> introduction  
   -> so far, you've worked with creating database models, generating tables, inserting data, and querying your database  
   -> as your application evolves, so too must your database, which means updating your tables and models  
   -> however, modifying your tables often involves dropping them entirely, which results in the loss of all data  
   -> this is where database migration comes into play, allowing you to make incremental updates to your database without losing the existing data  

-> what is database migration?  
   -> database migration refers to the process of running scripts that modify your database schema (i.e., how your data is structured) over time  
   -> it allows for incremental changes to be applied, so you can evolve your models as your app grows, without losing your data in the process  
   -> the migration process tracks changes to the database schema, creating a history of changes, similar to version control for your database  
   -> think of database migration like the natural migration patterns of animals, where data "moves" to adjust to new changes in the system over time  

-> what is flask-migrate?  
   -> flask-migrate is an extension for flask that helps manage database migrations  
   -> it is built on top of alembic, a migration framework for sqlalchemy  
   -> flask-migrate essentially wraps alembic's functionality in a way that integrates seamlessly with flask, allowing you to perform database migrations directly from the command line  

-> how to install and run flask-migrate  
   -> installing flask-migrate is straightforward, and as with other flask extensions, you can install it via pip in your virtual environment:  
     ```bash  
     pip install flask-migrate  
     ```  
   -> unlike other flask extensions, the initialisation of flask-migrate requires you to specify which database models it should help manage migrations for  
   -> once installed, you'll need to add this to your flask app to initialise flask-migrate:  
     ```python  
     from flask_migrate import migrate  
     migrate = migrate(app, db)  
     ```  
   -> after setting up flask-migrate, you need to initialise the migration system by running:  
     ```bash  
     flask db init  
     ```  
   -> this command will generate a new `migrations` directory in your project, which contains the necessary files and scripts to track and apply migrations  
   -> you should commit this `migrations` folder to your version control system (e.g., git), as it will be used to store migration scripts for future changes to your database schema  

-> when to perform a database migration  
   -> you should perform a migration whenever changes are made to your database models  
   -> these changes could include:  
     -> adding or removing columns from existing tables  
     -> renaming or modifying table names  
     -> adding new models or introducing relationships between existing models  
   -> in essence, if your data models change, it's time to run a migration  

-> database migration scripts  
   -> flask-migrate generates alembic migration scripts when you run the `flask db migrate` command  
   -> these scripts contain the instructions for applying (upgrade()) or rolling back (downgrade()) changes to your database schema  
   -> the migration scripts allow you to apply and, if needed, revert database changes, meaning you can move your database to any point in its change history  
   -> a typical alembic migration script looks something like this:  
     ```python  
     def upgrade():  
         # apply schema changes  
     def downgrade():  
         # revert schema changes  
     ```  
   -> these functions are executed by flask-migrate when applying or undoing a migration  

-> how to perform a database migration with flask-migrate  
   -> the process for running a migration involves several steps:  
     1. modify your model classes to reflect any changes you need (e.g., add a column, change a relationship)  
     2. generate the migration script by running the following command:  
        ```bash  
        flask db migrate  
        ```  
     3. review the generated migration script to ensure it accurately reflects the changes you've made in your models (sometimes automatic migrations can miss minor details or misinterpret changes)  
     4. add the migration script to source control (git), so it's versioned alongside your application code  
     5. finally, apply the migration with the following command:  
        ```bash  
        flask db upgrade  
        ```  
   -> this will apply the migration to your database, updating the schema without affecting the existing data  

-> important warning  
   -> automatic migrations are not perfect'sometimes, they might not fully capture the changes you made to your models  
   -> for example, if you rename a column, flask-migrate might treat it as if you've deleted the old column and added a new one, which could result in data loss  
   -> it's essential to review the migration script carefully before applying it, especially when renaming or deleting fields, to avoid losing data  

-> upgrade your database  
   -> after generating the migration script and reviewing it, you can upgrade your database to the new schema by running:  
     ```bash  
     flask db upgrade  
     ```  
   -> the upgrade command applies the migration script to the database, updating its schema while preserving your data  
   -> unlike nuking the database (which would involve dropping all tables and losing data), the upgrade modifies the schema incrementally, so your data remains intact  

-> summary: how to run a database migration with flask-migrate  
   -> a database migration framework allows you to apply changes to your database models without losing data  
   -> flask-migrate is an extension that simplifies database migrations in flask applications, using alembic for the migration process  
   -> migration steps:  
     1. modify your models  
     2. generate a migration script  
     3. review the script for accuracy  
     4. commit the script to source control  
     5. apply the migration with `flask db upgrade`  

-> example commands  
   -> to generate a migration script:  
     ```bash  
     flask db migrate -m "initial migration"  
     ```  
   -> to apply the migration:  
     ```bash  
     flask db upgrade  
     ```  

-> flask-migrate is an invaluable tool for managing changes to your database schema and ensures that your database evolves alongside your application while maintaining data integrity  
