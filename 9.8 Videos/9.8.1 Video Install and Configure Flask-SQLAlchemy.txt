-> installing and configuring sqlalchemy in flask  
    -> installing flask-sqlalchemy extension  
        -> flask-sqlalchemy is an extension that simplifies integrating sqlalchemy with flask  
        -> install flask-sqlalchemy via pip:  
            ```bash  
            pip install flask-sqlalchemy  
            ```  
        -> the os module is also required for handling file paths for the database  
        -> flask-sqlalchemy abstracts many of sqlalchemy’s complexities to make it easier to interact with databases in flask  
        -> flask-sqlalchemy also supports various databases such as sqlite, postgresql, and mysql, making it a versatile option for your flask projects  

    -> setting up the database location  
        -> sqlalchemy needs to know where the database file is located  
        -> flask provides a configuration system to manage settings, including the location of the database  
        -> the database file should be placed in the flask project directory for simplicity, but it can be anywhere on your system  
        -> use the os path functions to dynamically capture the file path and store it in your flask application settings  
        -> set the path of the database file in the `sqlalchemy_database_uri` configuration variable in your flask app  
        -> example:  
            ```python  
            sqlalchemy_database_uri = 'sqlite:///path_to_your_database.db'  
            ```  
        -> this tells sqlalchemy to use sqlite, and the path points to the database file on your system  
        -> the database will be created as a `.db` file if it doesn't exist  
        -> if you're using a database like postgresql or mysql, the uri will look something like this:  
            ```python  
            sqlalchemy_database_uri = 'postgresql://username:password@localhost/database_name'  
            ```

    -> disabling modification tracking  
        -> flask-sqlalchemy tracks modifications to objects (e.g., models) in order to emit signals  
        -> this behaviour can be disabled to reduce overhead if you don't need these signals  
        -> add this configuration line to disable modification tracking:  
            ```python  
            sqlalchemy_track_modifications = false  
            ```

-> defining database models with sqlalchemy  

    -> what are models?  
        -> in sqlalchemy, a model is a python class that represents a table in your database  
        -> each attribute of the class represents a column in the database table  
        -> models are typically defined as subclasses of `db.model`, where `db` is the instance of flask-sqlalchemy  

    -> example: defining a user model  
        -> a typical model will have an `id`, `username`, and `email`, among other fields  
        -> the `id` column is typically set as the primary key  
        -> the `username` and `email` columns may have unique constraints and should not be nullable  
        -> example of defining a `user` model:  
            ```python  
            class user(db.model):  
                id = db.column(db.integer, primary_key=true)  # primary key column  
                username = db.column(db.string(100), unique=true, nullable=false)  # unique, non-nullable column  
                email = db.column(db.string(100), unique=true, nullable=false)  # unique, non-nullable column  
            ```  

    -> primary key and indexing  
        -> a primary key uniquely identifies each record in the table and ensures that the database can efficiently access and manage records  
        -> the primary key is usually defined in the model class using `primary_key=true`  
        -> sqlalchemy will automatically index the primary key column for fast lookups  

    -> setting constraints on columns  
        -> columns in sqlalchemy can have constraints such as `unique=true` (ensures no duplicates), `nullable=false` (ensures no null values), and `default=value` (sets a default value if none is provided)  
        -> example of a column with constraints:  
            ```python  
            username = db.column(db.string(100), unique=true, nullable=false)  
            ```  
        -> these constraints ensure that your database enforces the desired structure and integrity  

    -> defining relationships between models  
        -> relationships represent connections between models and allow you to link data across tables  
        -> in this example, a `user` can have one `role`, and a `role` can be associated with multiple `users`  
        -> this can be set up using `db.relationship()` and `db.foreignkey()`  

    -> example: role model with a relationship to user  
        -> define the `role` model with a back reference to the `user` model:  
            ```python  
            class role(db.model):  
                id = db.column(db.integer, primary_key=true)  
                name = db.column(db.string(100), unique=true)  
                users = db.relationship('user', backref='role', lasy=true)  
            ```  

        -> in this example:  
            - `users` defines a one-to-many relationship from `role` to `user`  
            - `backref='role'` in the `user` model will allow you to access the role of a user directly as `user.role`  
            - the `lasy=true` option makes sqlalchemy lasy-load the users when the role is queried  

        -> in the `user` model, define the foreign key to link each user to a role:  
            ```python  
            class user(db.model):  
                id = db.column(db.integer, primary_key=true)  
                role_id = db.column(db.integer, db.foreignkey('role.id'), nullable=false)  
            ```

-> creating the database using flask shell  

    -> setting up the flask shell  
        -> the flask shell allows you to interact with your flask app’s context and perform database operations interactively  
        -> to start the flask shell, use the following command in the terminal:  
            ```bash  
            flask shell  
            ```  

    -> importing the database instance  
        -> within the flask shell session, import the `db` instance from your application to interact with the database  
        -> example:  
            ```python  
            from yourapp import db  
            ```  

    -> creating the tables  
        -> once your models are defined, use the `create_all()` method to generate the tables in the database  
        -> this method creates the tables based on the models you’ve defined (such as `user` and `role`)  
        -> example:  
            ```python  
            db.create_all()  
            ```  

    -> verifying database creation  
        -> after running `create_all()`, you should see the tables created in the database file specified in your configuration  
        -> for sqlite, this will create a `.db` file in your project directory (e.g., `app.db`)  
        -> you can use database management tools like db browser for sqlite to inspect the created database  

-> storing configuration in `config.py`  

    -> why use `config.py`?  
        -> storing configuration settings in a separate `config.py` file helps keep your application organised and flexible  
        -> this centralises configuration management and makes it easier to adjust settings without changing the main application code  

    -> creating a `config.py` file  
        -> in the `config.py` file, define a `config` class that holds your application’s settings, such as the database uri  
        -> example:  
            ```python  
            class config:  
                sqlalchemy_database_uri = 'sqlite:///path_to_your_database.db'  
                sqlalchemy_track_modifications = false  
            ```  

    -> using the config in your flask app  
        -> import and use the `config` class in your flask application to apply the configuration settings  
        -> example:  
            ```python  
            from flask import flask  
            from config import config  

            app = flask(__name__)  
            app.config.from_object(config)  
            ```  

    -> why use `from_object`?  
        -> the `from_object()` method loads configuration settings from a python object (in this case, the `config` class)  
        -> this approach is cleaner and keeps the app's configuration organised  

-> conclusion  
    -> in this video, you’ve learned how to install and configure sqlalchemy in flask  
    -> you’ve defined database models and established relationships between them  
    -> you’ve also used the flask shell to create the database and tables  
    -> by storing configuration in a separate `config.py` file, you can maintain a cleaner, more organised codebase  
    -> with these fundamental steps, you are well on your way to building dynamic, data-driven applications with flask and sqlalchemy  
