-> adding and downgrading an age column in the user model  
    -> goal: add the age column to the user model  
        -> first, you need to modify the `user` model in your flask application to include a new column called `age`  
        -> this involves adding the `age` attribute as a column in your model class (e.g., `db.column(db.integer)` for an integer column to store age)  
        -> after adding the column definition in the model, you need to save the changes to the python file  

    -> create a database migration  
        -> after modifying the model, you need to generate a migration to update the database schema  
        -> migrations in flask (with sqlalchemy and flask-migrate) track changes to the database schema and ensure your database structure is updated accordingly  
        -> use the command `flask db migrate -m "add age column to user model"` to create a migration script  
        -> the `-m` flag allows you to add a message to describe the change (e.g., "add age column to user model")  
        -> the migration script will contain instructions to alter the database schema and add the `age` column to the `user` table  

    -> verifying the migration script  
        -> open the generated migration script (found in the `migrations/versions` folder) to verify that it correctly reflects the changes to the user model  
        -> the script should contain an `add_column` operation for the `age` column and the corresponding datatype (e.g., `integer`)  
        -> verify that the migration does not contain any unintended changes that might affect other columns or tables in your database  

    -> performing the upgrade  
        -> once you have verified the migration script, you can apply it to the database using the `flask db upgrade` command  
        -> this will execute the migration and modify the database schema to add the `age` column to the `user` table  
        -> it is important to run the `flask db upgrade` command in the appropriate environment (development or production) to ensure the database is updated with the new column  
        -> flask-migrate will automatically handle any necessary sql operations to add the new column to the database, while ensuring existing data remains intact  

    -> testing the migration  
        -> after running the upgrade, it is essential to test that the `age` column was added correctly and that the database still functions as expected  
        -> open a flask shell using the command `flask shell` to interact with the database in a python environment  
        -> in the flask shell, test if the `user` model can successfully retrieve a user from the database:  
            ```python  
            user = user.query.first()  
            print(user.age)  
            ```  
        -> if the `age` column was added correctly, you should be able to retrieve the user without errors, and the `age` attribute will return the correct value (or `none` if no value has been set yet)  
        -> if you encounter errors during retrieval or data manipulation, it suggests that there may be issues with the migration or the way the column was added  

    -> handling the removal of the age column (downgrading)  
        -> scenario: after the migration, you decide the `age` column is unnecessary and want to remove it  
        -> if the changes have not been pushed to a production environment (e.g., in version control), you can safely run the `flask db downgrade` command to undo the migration  
        -> the `flask db downgrade` command reverts the database schema to the previous state, removing any changes made in the latest migration (in this case, removing the `age` column)  
        -> the downgrade operation will reverse the `add_column` operation from the migration, ensuring the `age` column is removed from the `user` table  

    -> reverting the code to the previous commit  
        -> after downgrading the database, you must also update your code to reflect the change (removing the `age` column from the `user` model)  
        -> use version control (e.g., git) to reset the code to the commit before the `age` column was added  
        -> running `git reset --hard <previous_commit_hash>` will revert the code back to the previous state, removing any changes to the `user` model  
        -> this ensures the code is in sync with the database schema, as the column is now removed from both the model and the database  
        -> resetting the code to a previous commit also helps avoid inconsistencies and potential errors caused by uncommitted or unwanted changes  

    -> continuing with the project after removing the age column  
        -> with the `age` column now removed from both the database and the code, you can continue developing your project without the column  
        -> this process of adding and removing columns is typical during the development phase, where you may experiment with different database models  
        -> the ability to downgrade the database schema using flask-migrate and git for version control gives you flexibility and safety when making changes to your application  
        -> always ensure that migrations are applied carefully and that the database is tested after any schema changes to prevent issues with data integrity  

    -> key concepts recap  
        -> **migrations**: flask-migrate handles changes to the database schema, allowing you to create, apply, and reverse changes like adding or removing columns  
        -> **database upgrade**: the `flask db upgrade` command applies migrations to the database, altering the schema to match the model changes  
        -> **database downgrade**: the `flask db downgrade` command reverts the database to a previous state, removing changes from the last migration  
        -> **version control**: git is used to manage and revert code changes to ensure your codebase and database schema are synchronised  
