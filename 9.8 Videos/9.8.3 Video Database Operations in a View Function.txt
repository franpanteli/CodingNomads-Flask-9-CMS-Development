-> adding a user to the database and personalising the user experience  
    -> objective overview  
        -> the goal is to store usernames in the database so that the application can keep track of whether a user has entered their name before  
        -> by doing this, the app can provide a personalised experience by greeting returning users differently from new users  
        -> this personalised greeting enhances the user experience and makes the interaction with the app feel more dynamic and tailored  

    -> capturing user input from a form  
        -> the user enters their name through a form on the front end (html form), which sends the input to the server via a post request  
        -> in flask, forms can be processed using the `request` object to capture the submitted data  
        -> the form data (user's name) is sent as part of the post request and is accessible on the backend in the route handling the request  
        -> example of capturing input:  
            ```python  
            username = request.form.get('username')  
            ```  

    -> checking if the user already exists in the database  
        -> before adding a new user to the database, check if the entered username already exists  
        -> use sqlalchemy to query the database and look for the username in the `username` column of the `user` model (or the appropriate table)  
        -> sqlalchemy provides easy querying with `filter_by` or `filter` methods:  
            ```python  
            user = user.query.filter_by(username=username).first()  
            ```  
        -> if the result is `none`, it means the user is not already in the database, and thus, they are new  
        -> if a matching record is found, the user is a returning user, and no new record needs to be created  

    -> setting session variables to track user status  
        -> flask uses sessions to track information across requests (without requiring the user to log in)  
        -> in this case, the session will store whether the user is new or returning  
        -> session variables are set using `session` from flask, which stores data between user requests  
        -> example:  
            - if the user is new:  
                ```python  
                session['new_user'] = true  
                ```  
            - if the user is returning:  
                ```python  
                session['new_user'] = false  
                ```  
        -> session data persists across requests during the user's session, allowing you to customise the user experience  
        -> note: sessions require a secret key to be set in your flask app:  
            ```python  
            app.secret_key = 'your_secret_key'  
            ```  

    -> storing the new user in the database  
        -> if the user does not already exist in the database (checked via the query), they are considered new  
        -> a new `user` object is created using the data (e.g., the entered `username`) and added to the session:  
            ```python  
            new_user = user(username=username)  
            db.session.add(new_user)  
            db.session.commit()  
            ```  
        -> this creates a new entry in the `user` table (or equivalent) and commits the transaction to save it  
        -> `db.session.add()` adds the new record to the current session, and `db.session.commit()` saves the changes to the database  

    -> updating session variables for new vs. returning users  
        -> if the user already exists (i.e., `user` is not `none`), update the session variable to reflect that they are a returning user  
        -> example:  
            ```python  
            session['new_user'] = false  
            ```  
        -> this session variable allows the app to differentiate between new and returning users on subsequent visits  

    -> modifying the template to display different greetings  
        -> in your flask route, pass the session data (e.g., `new_user`) and the username to the template using `render_template`  
        -> in the template, use jinja to display the appropriate message based on whether the user is new or returning  
        -> example template logic:  
            ```html  
            {% if session['new_user'] %}  
                <p>nice to meet you, {{ username }}!</p>  
            {% else %}  
                <p>welcome back, {{ username }}!</p>  
            {% endif %}  
            ```  
        -> the `session['new_user']` variable is checked to determine if the user is new or returning  
        -> the template then renders a different greeting message based on this condition  

    -> testing the user flow  
        -> test the feature by entering a new username into the form and submitting it  
        -> the first time the user enters a name, the application should store the name in the database and display a greeting for a new user (e.g., "nice to meet you, [username]!")  
        -> when a returning user submits the same name, the app should recognise the user (via the session and the database) and show a personalised greeting like "welcome back, [username]!"  
        -> this confirms that the system correctly identifies new and returning users  

    -> handling returning users  
        -> once the user enters their name and submits the form, the session variable tracks whether they are new or returning  
        -> for returning users, the session will contain `session['new_user'] = false`, and the app will display a personalised greeting  
        -> returning users are greeted with a message that includes their name, such as "welcome back, [username]!"  
        -> this allows the app to create a more personalised and engaging user experience for users who interact with the app multiple times  

    -> conclusion  
        -> by the end of this process, you will have added functionality to store usernames in the database and track whether a user is new or returning  
        -> this personalised user experience enhances user interaction and makes the app feel more tailored to each individual  
        -> flask sessions provide a lightweight and easy way to track user state (new or returning), while the database ensures persistence of user data for future visits  
        -> the ability to greet returning users differently from new users is just one example of how you can use database and session management to create dynamic, personalised web applications  
