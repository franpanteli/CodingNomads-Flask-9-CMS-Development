-> database management using flask-sqlalchemy lesson  
   -> querying the database with flask-sqlalchemy and the flask shell  

-> introduction  
   -> flask sqlalchemy provides a convenient way to manage databases and query models  
   -> flask shell is used to interact with flask applications through a python interpreter  

-> flask sqlalchemy and flask shell  
   -> flask shell allows you to interact with the flask app's context via a python shell  
   -> to start flask shell:  
      -> set the environment variable to `flask_app=hello.py`  
      -> in the terminal, type `flask shell`  

-> creating tables with flask sqlalchemy  
   -> flask-sqlalchemy automatically creates tables for all defined models using `db.create_all()`  
   -> if the tables already exist, they won't be recreated; if the models change, you'll need to drop tables with `db.drop_all()` before recreating  
   -> example to create tables:  
     ```python  
     from hello import db  
     db.create_all()  
     ```  

-> dropping tables  
   -> to update tables after changing models, drop and recreate tables:  
     ```python  
     db.drop_all()  
     db.create_all()  
     ```  

-> inserting rows into your tables  
   -> insert rows by creating model instances and adding them to the database session  
   -> example:  
     ```python  
     admin_role = Role(name='administrator')  
     user_role = Role(name='user')  
     user_paul = User(username='paul', role=admin_role)  
     db.session.add(admin_role)  
     db.session.add(user_role)  
     db.session.add([user_paul])  
     db.session.commit()  
     ```  

-> flask sqlalchemy database session  
   -> add objects to the session using `db.session.add()` and commit with `db.session.commit()`  
   -> committing a session writes data to the database  
   -> session errors cause an "undo" of all changes, so group related changes together  
   -> example:  
     ```python  
     db.session.add(admin_role)  
     db.session.add(user_role)  
     db.session.commit()  
     ```  

-> modifying and deleting rows  
   -> to modify a row, change the attributes of the model instance, then commit:  
     ```python  
     admin_role.name = 'admin'  
     db.session.commit()  
     ```  
   -> to delete a row, use `db.session.delete()`, then commit:  
     ```python  
     db.session.delete(user_jan)  
     db.session.commit()  
     ```  

-> basic queries and filtering  
   -> query all data from a table using `.all()`  
     ```python  
     role.query.all()  
     user.query.all()  
     ```  
   -> filter queries with `.filter_by()` to get specific data  
     ```python  
     user.query.filter_by(role=user_role).all()  
     ```  

-> query executor  
   -> common query methods include `.all()`, `.first()`, `.get()`, `.count()`, `.paginate()`  
   -> example of limiting results:  
     ```python  
     user.query.filter_by(role=user_role).limit(1).all()  
     ```  

-> query relationships  
   -> query relationships like a list (e.g., `role.users`), which implicitly executes a query  
   -> example:  
     ```python  
     users = user_role.users  
     print(users)  
     ```  

-> flask sqlalchemy lazy loading  
   -> lazy loading loads data only when accessed, optimising performance  
   -> to use lazy loading, define relationships with `lazy='dynamic'`  
     ```python  
     users = user_role.users.order_by(user.username).all()  
     ```  

-> flask sqlalchemy lazy values  
   -> common lazy loading options include:  
      -> `dynamic`: query is not executed until needed  
      -> `immediate`: executes query immediately  
      -> `joined`: loads data using a join  
      -> `noload`: data is not loaded automatically  
      -> `select`: uses a select statement for loading data  

-> flask shell context processor  
   -> use `@app.shell_context_processor` to automatically import models into the flask shell session  
     ```python  
     @app.shell_context_processor  
     def make_shell_context():  
         return dict(db=db, user=user, role=role)  
     ```  
   -> this eliminates the need to manually import models each time you start a new shell session  

-> summary  
   -> you've learned how to create and manage tables, insert, modify, and delete data, and query the database  
   -> flask-sqlalchemy simplifies interactions with the database and improves efficiency in querying data  
   -> key operations:  
      -> `db.create_all()` to create tables  
      -> `db.session.add()` to add data  
      -> `db.session.commit()` to save data  
      -> query with `.all()`, `.filter_by()`, `.first()`, etc.  
   -> lazy loading allows you to optimise performance by loading data only when needed  
